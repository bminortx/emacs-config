(if (string= system-type "darwin")
    (progn (cd "/Applications/Emacs.app/")
	   (normal-top-level-add-subdirs-to-load-path)
	   (setenv "WEBOTS_HOME" "/Applications/Webots/"))
  (setenv "WEBOTS_HOME" "/usr/local/webots")
  )
;(progn (cd "/usr/local/share/emacs") (normal-top-level-add-subdirs-to-load-path))
(add-to-list 'load-path "~/.emacs.d/plugins")
(progn (cd "~/.emacs.d/plugins") (normal-top-level-add-subdirs-to-load-path))

(cd "~/")



(setenv "PATH" (concat (getenv "PATH") ":/usr/texbin/"))

(setq exec-path (append exec-path '("/usr/texbin/")))

(setenv "PATH" (concat (getenv "PATH") ":/usr/local/git/bin"))
(setq exec-path (append exec-path '("/usr/local/git/bin")))

(setenv "PATH" (concat (getenv "PATH") ":/sw/bin"))
(setq exec-path (append exec-path '("/sw/bin")))


(setenv "PATH" (concat (getenv "PATH") ":/opt/local/bin"))
(setq exec-path (append exec-path '("/opt/local/bin")))


(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(TeX-PDF-mode t)
 '(ac-quick-help-prefer-x nil)
 '(asm-comment-char 35)
 '(compilation-scroll-output t)
 '(compilation-skip-threshold 2)
 '(ecb-options-version "2.32")
 '(font-lock-global-modes t)
 '(font-lock-support-mode (quote jit-lock-mode))
 '(garak-hide-offline-buddies t)
 '(grep-command "git grep -nH -e ")
 '(grep-highlight-matches t)
 '(grep-template "git grep <C> -nH -e <R> <F>")
 '(grep-use-null-device nil)
 '(gud-gdb-command-name "gdb --annotate=1")
 '(inhibit-startup-screen t)
 '(initial-buffer-choice nil)
 '(inverse-video nil)
 '(ispell-dictionary "australian" t)
 '(ispell-highlight-face (quote flyspell-incorrect))
 '(jit-lock-defer-time 0.25)
 '(jit-lock-stealth-time 16)
 '(large-file-warning-threshold nil)
 '(left-margin 0)
 '(magit-log-cutoff-length 100)
 '(magit-status-buffer-switch-function (quote switch-to-buffer))
 '(mk-proj-use-ido-selection t)
 '(mode-line-format (quote ("%e" #("-" 0 1 (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display")) mode-line-mule-info mode-line-client mode-line-modified mode-line-remote mode-line-frame-identification mode-line-buffer-identification #("   " 0 3 (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display")) mode-line-position (vc-mode vc-mode) #("  " 0 2 (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display")) (which-func-mode ("" which-func-format #("--" 0 2 (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display")))) #("-%-" 0 3 (help-echo "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display")))))
 '(org-export-headline-levels 1)
 '(org-export-with-toc nil)
 '(org-hide-leading-stars t)
 '(org-odd-levels-only t)
 '(overline-margin 2)
 '(safe-local-variable-values (quote ((outline-minor-mode))))
 '(semantic-stickyfunc-indent-string "   ")
 '(show-paren-mode t)
 '(size-indication-mode nil)
 '(todochiku-command "/usr/bin/notify-send")
 '(todochiku-tooltip-too nil)
 '(whitespace-style (quote (tabs trailing lines)))
 '(x-gtk-whole-detached-tool-bar nil)
 '(yas/next-field-key (quote ("<C-tab>")) t)
 '(yas/prompt-functions (quote (yas/dropdown-prompt yas/completing-prompt yas/ido-prompt yas/no-prompt)))
 '(yas/trigger-key "<C-tab>" t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(default ((t (:inherit nil :stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 85 :width normal :foundry "unknown" :family "Inconsolata"))))
 '(Font-Lock-String-face ((t (:foreground "forest green" :slant italic))))
 '(background "blue")
 '(bold ((t (:weight bold))))
 '(compilation-error ((t (:foreground "red" :underline t :weight bold))))
 '(compilation-warning ((((class color) (min-colors 16)) (:background "lightblue1" :foreground "Orange" :weight bold))))
 '(cursor ((t (:background "SteelBlue"))))
 '(font-lock-builtin-face ((((class color) (background dark)) (:foreground "Turquoise"))))
 '(font-lock-comment-face ((t (:foreground "firebrick"))))
 '(font-lock-constant-face ((t (:foreground "steel blue"))))
 '(font-lock-doc-string-face ((t (:foreground "green2"))) t)
 '(font-lock-function-name-face ((t (:foreground "SkyBlue"))))
 '(font-lock-keyword-face ((t (:bold t :foreground "CornflowerBlue"))))
 '(font-lock-preprocessor-face ((t (:italic nil :foreground "CornFlowerBlue"))))
 '(font-lock-reference-face ((t (:foreground "DodgerBlue"))) t)
 '(font-lock-type-face ((t (:stipple nil :background "#ffffff" :foreground "LimeGreen" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight bold :width normal))))
 '(font-lock-variable-name-face ((t (:foreground "PaleGreen"))))
 '(font-lock-warning-face ((nil (:foreground "red"))))
 '(fringe ((t (:background "white" :foreground "white"))))
 '(highlight ((t (:background "LightSkyBlue"))))
 '(linum ((t (:foreground "gray30"))))
 '(list-mode-item-selected ((t (:background "gold"))))
 '(magit-diff-add ((nil (:foreground "blue"))))
 '(magit-item-highlight ((((class color) (background light)) (:background "gray90"))))
 '(makefile-space ((t (:background "wheat"))))
 '(makefile-space-face ((t (:background "wheat"))) t)
 '(mode-line ((t (:background "lawn green"))))
 '(mode-line-inactive ((t (:background "gray" :foreground "black"))))
 '(org-tag ((t (:slant oblique :weight bold))))
 '(outline-4 ((t (:foreground "Brown"))))
 '(paren-match ((t (:background "darkseagreen4"))))
 '(region ((t (:background "DarkSlateBlue"))))
 '(scroll-bar ((t nil)))
 '(show-paren-mismatch ((((class color)) (:foreground "white" :background "red"))))
 '(speedbar-button-face ((((class color) (background dark)) (:foreground "green4"))))
 '(speedbar-directory-face ((((class color) (background dark)) (:foreground "khaki"))))
 '(speedbar-file-face ((((class color) (background dark)) (:foreground "cyan"))))
 '(speedbar-tag-face ((((class color) (background dark)) (:foreground "Springgreen"))))
 '(tool-bar ((t (:foreground "black" :box (:line-width 1 :style released-button)))))
 '(vertical-border ((t (:background "DarkOliveGreen2" :foreground "black"))))
 '(vhdl-speedbar-architecture-selected-face ((((class color) (background dark)) (:underline t :foreground "Blue"))))
 '(vhdl-speedbar-entity-face ((((class color) (background dark)) (:foreground "darkGreen"))))
 '(vhdl-speedbar-entity-selected-face ((((class color) (background dark)) (:underline t :foreground "darkGreen"))))
 '(vhdl-speedbar-package-face ((((class color) (background dark)) (:foreground "black"))))
 '(vhdl-speedbar-package-selected-face ((((class color) (background dark)) (:underline t :foreground "black"))))
 '(which-func ((((class color) (min-colors 88) (background light)) (:inherit (mode-line)))))
 '(widget-field ((((class grayscale color) (background light)) (:background "LightBlue")))))


;; Turn on pretty font colors
(global-font-lock-mode t)

(setq font-lock-maximum-decoration 3)


;; Scroll faster, colors won't appear correctly right away
(setq lazy-lock-defer-on-scrolling t)
(setq lazy-lock-continuity-time 0.3)

(setq search-highlight t)	       ; incremental search highlights
(setq query-replace-highlight t)       ; highlight during query

;; set highlight color
(set-face-background 'region "DarkOliveGreen2")

;; Isearch highlight colors
(copy-face 'default  'isearch)
(set-face-background 'isearch "DarkGreen")
(set-face-foreground 'isearch "white")

;; Isearch lazy highlight colors
(if (> emacs-major-version 20)
    (progn (set-face-background 'isearch-lazy-highlight-face "LawnGreen")
	   (set-face-foreground 'isearch-lazy-highlight-face "white")))

;; Some new colors for font-lock
;; For list of colors, use M-x list-colors-display
;; The "nil 1" after the make-face-italic and make-face-bold
;; prevents errors from being reported (I saw this problem
;; with Emacs 20.7.2 in -nw mode).  The errors don't appear
;; on 21.2.1
(copy-face 'default  'font-lock-string-face)
(make-face-italic 'font-lock-string-face nil 1)
(set-face-foreground 'font-lock-string-face "plum4")

(copy-face 'default  'font-lock-variable-name-face)
(set-face-foreground 'font-lock-variable-name-face "RoyalBlue")

(copy-face 'default  'font-lock-preprocessor-face)
(set-face-foreground 'font-lock-preprocessor-face "Red")

(copy-face 'default  'font-lock-function-name-face)
(make-face-bold 'font-lock-function-name-face nil 1)
(set-face-foreground 'font-lock-function-name-face "DarkGreen")

(copy-face 'default  'font-lock-keyword-face)
(set-face-foreground 'font-lock-keyword-face "DarkSlateBlue")

(copy-face 'default  'font-lock-type-face)
(make-face-bold 'font-lock-type-face nil 1)
(set-face-foreground 'font-lock-type-face "LimeGreen")

(copy-face 'default  'font-lock-reference-face)
(set-face-foreground 'font-lock-reference-face "SkyBlue3")

(copy-face 'default  'font-lock-doc-string-face)
(make-face-italic 'font-lock-doc-string-face nil 1)
(set-face-foreground 'font-lock-doc-string-face "sienna4")

(copy-face 'default  'font-lock-constant-face)
(set-face-foreground 'font-lock-constant-face "SkyBlue2")

(copy-face 'default  'font-lock-type-name-face)
(make-face-italic 'font-lock-type-name-face nil 1)
(set-face-foreground 'font-lock-type-name-face "Red")

(copy-face 'default  'font-lock-builtin-face)
(make-face-bold 'font-lock-builtin-face nil 1)
(set-face-foreground 'font-lock-builtin-face "OrangeRed3")

(copy-face 'default  'show-paren-match-face)
(set-face-background 'show-paren-match-face "SandyBrown")

(copy-face 'default  'show-paren-mismatch-face)
(set-face-background 'show-paren-mismatch-face "magenta")

(copy-face 'default  'minibuffer-prompt)
(make-face-bold 'minibuffer-prompt nil 1)
(set-face-foreground 'minibuffer-prompt "IndianRed")

(copy-face 'default  'ediff-even-diff-face-A)
(set-face-foreground 'ediff-even-diff-face-A "white")
(set-face-background 'ediff-even-diff-face-A "gray30")

(copy-face 'default  'ediff-odd-diff-face-A)
(set-face-foreground 'ediff-odd-diff-face-A "white")
(set-face-background 'ediff-odd-diff-face-A "SteelBlue4")

(copy-face 'ediff-even-diff-face-A 'ediff-even-diff-face-B)
(copy-face 'ediff-odd-diff-face-A 'ediff-odd-diff-face-B)
(copy-face 'ediff-even-diff-face-A 'ediff-odd-diff-face-C)
(copy-face 'ediff-odd-diff-face-A 'ediff-odd-diff-face-C)

(copy-face 'default 'ediff-current-diff-face-A)
(set-face-foreground 'ediff-current-diff-face-A "white")
(set-face-background 'ediff-current-diff-face-A "IndianRed4")

(copy-face 'default 'ediff-current-diff-face-B)
(set-face-foreground 'ediff-current-diff-face-B "white")
(set-face-background 'ediff-current-diff-face-B "sienna4")

(copy-face 'default 'ediff-current-diff-face-C)
(set-face-foreground 'ediff-current-diff-face-C "white")
(set-face-background 'ediff-current-diff-face-C "firebrick4")

(copy-face 'default 'ediff-fine-diff-face-A)
(set-face-foreground 'ediff-fine-diff-face-A "white")
(set-face-background 'ediff-fine-diff-face-A "SpringGreen4")

(copy-face 'ediff-fine-diff-face-A 'ediff-fine-diff-face-B)
(copy-face 'ediff-fine-diff-face-A 'ediff-fine-diff-face-C)

;; Turn on selection
(setq transient-mark-mode 't highlight-nonselected-windows 't)


;; Pressing backspace during an Isearch will delete the previous
;; character typed (or do a reverse isearch if something matches the
;; current word).  Without this, it will delete the highlighted text.
(define-key isearch-mode-map [backspace] 'isearch-delete-char)

;; Replace highlighted/marked areas
(delete-selection-mode t)


;; show paren matches
(setq blink-matching-paren t)
(setq show-paren-delay 0)
(show-paren-mode t)


;; Typing "yes" or "no" takes too long---use "y" or "n"
(fset 'yes-or-no-p 'y-or-n-p)



;;----Moving around---
;; Scroll one line at a time
(setq scroll-step 1)

;; Don't insert new lines when scrolling
(setq next-line-add-newlines nil)

;; Set C-c, g to goto-line
(global-set-key "\C-cg" 'goto-line)

;; Set up home/end keys
(global-set-key [end] 'end-of-buffer)
(global-set-key [home] 'beginning-of-buffer)

;; Moving around more easily
(global-set-key [C-right] 'forward-word)
(global-set-key [C-left] 'backward-word)

;; Remove menubar
(menu-bar-mode 1)


;; if using a graphical window (ie. not using -nw)
(if window-system

    (progn
      ;; Put scroll bar on the right side
      (if (> emacs-major-version 19)
	  (set-scroll-bar-mode 'right))
      (scroll-bar-mode 0)

      ;; Remove graphical toolbar (if version 21 or higher)
      (if (> emacs-major-version 20)
	  (tool-bar-mode 0))

      ;; If Emacs "hangs" for a few seconds while starting, you might have
      ;; to comment out or change the following line that tries to set the
      ;; font to a fixed width font:
      ;;(set-default-font "fixed")
      ;;(set-default-font "9x15")  ;; high resolution monitor, bigger fonts
      ;;(set-default-font "-xos4-terminus-bold-r-normal--14-140-72-72-c-80-iso8859-1")


      ;; don't show tooltips
      (if (or (and (> emacs-major-version 20)
		   (> emacs-minor-version 0))
	      (> emacs-major-version 21))
	  (tooltip-mode 0))

      ;; show entire file path in frame title
      (setq frame-title-format "Emacs - %f")

      ;; use mouse wheel to scroll
      (if (> emacs-major-version 20)
	  (mouse-wheel-mode t))

      ;; Default: scroll with middle,  page-up with left click, page down with right
      ;; Scroll with left mouse button
      ;; This only works with the plain scroll bar, not the Xaw3d variety
      (global-set-key [vertical-scroll-bar down-mouse-1] 'scroll-bar-drag)

      ;; Page down with middle button
      (global-set-key [vertical-scroll-bar mouse-2] 'scroll-bar-scroll-up)
      (global-set-key [vertical-scroll-bar drag-mouse-2] 'scroll-bar-scroll-up)
      (global-unset-key [vertical-scroll-bar down-mouse-2])

      ;; Page up with right button
      (global-set-key [vertical-scroll-bar mouse-3] 'scroll-bar-scroll-down)
      (global-set-key [vertical-scroll-bar drag-mouse-3] 'scroll-bar-scroll-down)

      ;; basic colors
      (setq default-frame-alist '((cursor-color . "RoyalBlue")
				  (cursor-type . box)
				  (foreground-color . "black")
				  (background-color . "white")))

      ;; modeline colors
      (set-face-background 'modeline "DarkOliveGreen2")
      (set-face-foreground 'modeline "black")

      ;;  (mouse-avoidance-mode 'animate) ;; Cool...but annoying



      )) ;; end if window-system

;; (when (load "flymake" t)
;;   (defun flymake-pyflakes-init ()
;;     (let* ((temp-file (flymake-init-create-temp-buffer-copy
;; 		       'flymake-create-temp-inplace))
;; 	   (local-file (file-relative-name
;; 			temp-file
;; 			(file-name-directory buffer-file-name))))
;;       (list "pyflakes" (list local-file))))
;;   (add-to-list 'flymake-allowed-file-name-masks
;; 	       '("\\.py$" flymake-pyflakes-init)))

;; (load-library "flymake-cursor")
;; (add-hook 'python-mode-hook 'flymake-find-file-hook)

;;; We define modes for c++, python, and java
(defun robocup-c++-mode ()
  "C++ mode made to fit the way I like it."
  (interactive)
  (c++-mode)
  (c-subword-mode)
  (c-set-style "K&R")
  (setq tab-width 4)
  (setq c-basic-offset 4)
  (setq-default show-trailing-whitespace t)
  ;(setq compile-command "make install -j2 -k -C ~/robocup/nao-man/ ")
  (which-func-mode 1)
  (setq indent-tabs-mode nil)
  (whitespace-mode 1)
  )

(defun robocup-python-mode ()
  (interactive)
  (python-mode)
  (c-subword-mode)
  (setq tab-width 4)
  (setq c-basic-offset 4)
  (setq-default show-trailing-whitespace t)
  (which-func-mode 1)
  (setq indent-tabs-mode nil)
  (whitespace-mode 1)
  )

(defun robocup-java-mode ()		; For the TOOL
  (interactive)
  (java-mode)
  (c-subword-mode)    ; Uncomment to treat camelText words as separate
  (setq tab-width 4)
  (setq c-basic-offset 4)
  (setq-default show-trailing-whitespace t)
  (which-func-mode 1)
  (setq indent-tabs-mode nil)
  ;(setq compile-command "ant compile")
  (whitespace-mode 1)
  )

(setq indent-tabs-mode nil)
;;; We set the robocup modes as default for the appropraite files
;;;
;;; To make this apply only in robocup directories add a path to the settings
;;; i.e. ("~/src/robocup/.*\\.cpp$" . robocup-c++-mode)
(setq auto-mode-alist (append '(("\\.cpp$" . robocup-c++-mode)
				("\\.cc$" . robocup-c++-mode)
				("\\.hpp$" . robocup-c++-mode)
				("\\.h$" . robocup-c++-mode)
				("\\.py$" . robocup-python-mode)
				("\\.java$" . robocup-java-mode)
				) auto-mode-alist))
(load-library "auctex")


;; (defun jack-latex-mode ()
;;   (interactive)
;;   (setq flyspell-mode 1)
;;   (setq latex-mode 1)
;;   (setq visual-line-mode 1)
;;   (require 'auctex)
;;   (setq TeX-auto-save t)
;;   (setq TeX-parse-self t)
;;   (setq-default TeX-master nil)
;;   (add-hook 'LaTeX-mode-hook (lambda ()
;; 			       (TeX-fold-mode 1))))


;; (setq auto-mode-alist (append '(("\\.tex$" . jack-latex-mode)
;; 				) auto-mode-alist))


;;; This makes trailing whitespace be highlighted


(setq load-path (cons (expand-file-name "/usr/share/doc/git-core/contrib/emacs") load-path))
(require 'vc-git)
(when (featurep 'vc-git) (add-to-list 'vc-handled-backends 'git))
;; (require 'git)
;; (autoload 'git-blame-mode "git-blame"
;;   "Minor mode for incremental blame for Git." t)

(require 'magit)

(global-set-key "\C-x\C-i" 'magit-status)

(global-set-key "\C-x\C-m" 'compile)
(global-set-key (kbd "<f7>") 'recompile)
(global-set-key "\C-c\C-m" 'execute-extended-command)

(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-c\C-v" 'pyflakes)
(global-set-key "\C-x\C-r" 'revert-buffer)

(global-set-key "\C-xn" 'flymake-goto-next-error)

(global-unset-key "\C-c\C-c")
(global-set-key "\C-c\C-c" 'comment-or-uncomment-region)

(global-set-key "\C-ck" 'kill-region)
(global-set-key "\C-c\C-k" 'kill-region)

(global-set-key "\C-xr" 'rgrep)

(setq blink-cursor-mode -1)

(put 'upcase-region 'disabled nil)

(put 'dired-find-alternate-file 'disabled nil)

;; ECB files
					; semantic:
;;(setq semantic-load-turn-everything-on t)
;;(require 'semantic-load)
					;(global-semantic-show-dirty-mode -1)
					;(global-semantic-show-unmatched-syntax-mode -1)

;(setq compile-command "make install -j4 -k -C ~/robocup/nao-man/ ")
;(setq compilation-scroll-output t)

(add-hook 'python-mode-hook '(lambda () (define-key python-mode-map "\C-c\C-k" 'kill-region)))

(add-hook 'org-mode-hook '(lambda () (visual-line-mode 1) ) )

(add-hook 'LaTeX-mode-hook '(lambda () (visual-line-mode 1) ) )
;; (add-hook 'LaTeX-mode-hook '(lambda () (flyspell-mode 1) ) )

(global-set-key (kbd "<f5>") 'linum-mode)

;; make option key meta
(setq mac-command-modifier 'meta)

(require 'yasnippet)
(yas/initialize)
(yas/load-directory "~/.emacs.d/plugins/yasnippet-read-only/snippets")

(iswitchb-mode)
(require 'cmake-mode)
(setq auto-mode-alist
      (append '(("CMakeLists\\.txt\\'" . cmake-mode)
		("\\.cmake\\'" . cmake-mode))
	      auto-mode-alist))

(setq ring-bell-function 'ignore)

;;desktop-autosave.el begins here
(provide 'desktop-autosave)
(eval-when-compile
  (require 'cl))

(require 'desktop)

(desktop-save-mode 1) ;; Switch on desktop.el

(defun desktop-autosave-save ()
  (desktop-save-in-desktop-dir))

;; Deletes trailing whitespace on all lines except the current one
;; so we don't affect our current indentation, etc.
;; (defun delete-all-but-whitespace ()
;;   (interactive)
;;   (setq c (current-column))
;;   ;; If the line is empty, we don't want to kill it (it will move our mark)
;;   (setq isEmpty (or (eobp) (looking-at "\s$")))

;;   ;; If we're not looking at an empty line,
;;   ;; add it (and only it) to the kill ring, the delete the current line.
;;   ;; This introduces a blank line, unfortunately, which is later a problem.
;;   (if (not isEmpty)
;;       (progn
;; 	(kill-new (thing-at-point 'line))
;; 	(delete-region (line-beginning-position) (line-end-position))
;; 	 ))

;;   (delete-trailing-whitespace)
;;   (if (not isEmpty)
;;       ;; Put the line back on the screen, delete the blank one, and go
;;       ;; back up a row
;;       (progn (yank)
;; 	     (kill-line)
;; 	     (previous-line)
;; 	     (current-kill 1)))
;;   (move-to-column c)
;;   (setq c nil))
(setq delete-all-but-whitespace nil)
(remove-hook 'before-save-hook 'delete-all-but-whitespace)
;; Add hook so we delete whitespace every time we save.
;; (add-hook 'before-save-hook
;; 	  (lambda ()
;; 	    (delete-all-but-whitespace)))

(add-hook 'auto-save-hook
	  (lambda ()
	    (desktop-autosave-save)))
;;desktop-autosave.el ends here

(require 'saveplace)
(setq-default save-place t)

(ido-mode 1)

(global-set-key "\C-xa" 'windmove-left)
(global-set-key "\C-xs" 'windmove-down)
(global-set-key "\C-xw" 'windmove-up)
(global-set-key "\C-xd" 'windmove-right)

(define-key global-map [f7] 'recompile)
(define-key global-map [f8] 'next-error)

(column-number-mode 1)

;;(require 'ess-site)
(require 'todochiku)
(if (string= system-type "darwin")
    '(todochiku-command "/usr/local/bin/growlnotify")
    )

;; (add-hook 'c-mode-common-hook
;; 	  (lambda()
;; 	    (add-hook 'local-write-file-hooks
;; 		      '(lambda()
;; 			 (save-excursion
;; 			   (delete-trailing-whitespace))))))

;; (add-hook 'java-mode-common-hook
;; 	  (lambda()
;; 	    (add-hook 'local-write-file-hooks
;; 		      '(lambda()
;; 			 (save-excursion
;; 			   (delete-trailing-whitespace))))))

;; (defadvice kill-ring-save (before slick-copy activate compile)
;;   "When called interactively with no active region, copy a single line instead."
;;   (interactive)
;;   (if mark-active (list (region-beginning) (region-end))
;;     (message "Copied line")
;;     (list (line-beginning-position)
;;           (line-beginning-position 2))))
(defadvice kill-ring-save (before slick-copy activate compile) "When called
  interactively with no active region, copy a single line instead."
  (interactive (if mark-active (list (region-beginning) (region-end))
		 (message "Copied line")
		 (list (line-beginning-position)
		       (line-beginning-position 2)))))

(defadvice yank (before slick-copy activate)
  "Position point when yanking lines."
  (let ((kill (current-kill 0 t)))
    (when (eq ?\n (elt kill (1- (length kill))))
      (beginning-of-line))))

;; (add-to-list 'load-path "~/.emacs.d/plugins/textmate.el")
;; (require 'textmate)

;; (add-hook 'java-mode-common-hook
;; 	  (lambda()
;; 	    (textmate-mode 1)))

(eval-after-load "ispell"
   (progn
     (setq ispell-extra-args '()
           ispell-silently-savep t
           ispell-dictionary "american")))

(setq-default ispell-program-name "ispell")

(put 'downcase-region 'disabled nil)

(global-set-key (kbd "C-c p c") 'project-compile)
(global-set-key (kbd "C-c p l") 'project-load)
(global-set-key (kbd "C-c p g") 'project-grep)
(global-set-key (kbd "C-c p a") 'project-ack)
(global-set-key (kbd "C-c p u") 'project-unload)
(global-set-key (kbd "C-c p f") 'project-find-file) ; or project-find-file-ido
(global-set-key (kbd "C-c p i") 'project-index)
(global-set-key (kbd "C-c p s") 'project-status)
(global-set-key (kbd "C-c p h") 'project-home)
(global-set-key (kbd "C-c p d") 'project-dired)
(global-set-key (kbd "C-c p t") 'project-tags)

(require 'mk-project)

(project-def "tool"
	     '((basedir "~/robocup/nbites/src/tool/")
	       (src-patterns ("*.java" "*.h" "*.cpp"))
	       (ignore-patterns ("*.class"))
	       (tags-file "~/robocup/nbites/src/tool/TAGS")
	       (file-list-cache "~/robocup/nbites/src/tool/files")
	       (open-files-cache "~/robocup/nbites/src/tool/open-files")
	       (vcs git)
	       (compile-cmd "ant -emacs -f ~/robocup/nbites/src/tool/build.xml compile visionlink")
	       (ack-args nil)
	       (startup-hook nil)
	       (shutdown-hook nil)
	       ))

(project-def "man"
	     '((basedir "~/robocup/nbites/src/man/")
	       (src-patterns ("*.py" "*.h" "*.cpp" "*.s"))
	       (ignore-patterns ("*.o" "*.html"))
	       (tags-file "~/robocup/nbites/src/man/TAGS")
	       (file-list-cache "~/robocup/nbites/src/man/files")
	       (open-files-cache "~/robocup/nbites/src/man/open-files")
	       (vcs git)
	       (compile-cmd "make -j4 -k -C ~/robocup/nbites/build/man/straight/ --no-print-directory")
	       (ack-args "--java --cpp --python")
	       (startup-hook nil)
	       (shutdown-hook nil)
	       ))

(project-def "remote"
	     '((basedir "~/robocup/nbites/src/remote/")
	       (src-patterns ("*.java"))
	       (ignore-patterns ("*.class" "*.html"))
	       (tags-file "~/robocup/nbites/src/remote/TAGS")
	       (file-list-cache "~/robocup/nbites/src/remote/files")
	       (open-files-cache "~/robocup/nbites/src/remote/open-files")
	       (vcs git)
	       (compile-cmd "ant -f ~/robocup/nbites/src/remote/build.xml")
	       (ack-args "--java")
	       (startup-hook nil)
	       (shutdown-hook nil)
	       ))
(project-def "thesis"
	     '((basedir "~/Dropbox/Bowdoin/Senior/Honors/thesis/")
	       (src-patterns ("*.tex"))
	       (ignore-patterns ("*.html"))
	       (tags-file "~/Dropbox/Bowdoin/Senior/Honors/thesis/TAGS")
	       (file-list-cache "~/Dropbox/Bowdoin/Senior/Honors/thesis/files")
	       (open-files-cache "~/Dropbox/Bowdoin/Senior/Honors/thesis/open-files")
	       (vcs git)
	       (compile-cmd "make -C ~/Dropbox/Bowdoin/Senior/Honors/thesis/ clean && make -C ~/Dropbox/Bowdoin/Senior/Honors/thesis/")
	       (ack-args nil)
	       (startup-hook nil)
	       (shutdown-hook nil)
	       ))

;; (global-mode-string
;;   (#("--" 0 2
;;      (help-echo "mouse-1: Select (drag to resize)\nmouse-2: Make current window occupy the whole frame\nmouse-3: Remove current window from display"))
;;    global-mode-string))

(load-file "~/.emacs.d/plugins/csharp-mode-0.7.6.el")

(add-to-list 'load-path "~/.emacs.d/plugins/")
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/plugins//ac-dict")
(ac-config-default)

;; (require 'undo-tree)
;; (global-undo-tree-mode 1)

(defun toggle-fullscreen (&optional f)
  (interactive)
  (let ((current-value (frame-parameter nil 'fullscreen)))
    (set-frame-parameter nil 'fullscreen
                         (if (equal 'fullboth current-value)
                             (if (boundp 'old-fullscreen) old-fullscreen nil)
                           (progn (setq old-fullscreen current-value)
                                  'fullboth)))))
(global-set-key [f11] 'toggle-fullscreen)

(global-set-key "\M-o" 'project-find-file-ido)

(require 'color-theme)
(defun dark-colors ()
  (interactive)
  (progn (color-theme-initialize)
	 (color-theme-dark-laptop)
	 (set-background-color "black")))

(load "~/.emacs.d/plugins/ess-5.12/lisp/ess-site")
(require 'ess-site)

(setq display-buffer-function nil)
(setq display-buffer-reuse-frames t)
(setq pop-up-windows nil)

(server-start)
(global-auto-revert-mode)

(require 'autopair)
(autopair-global-mode 1)

(setq frame-title-format
      '(:eval
        (if buffer-file-name
            (replace-regexp-in-string
             (getenv "HOME") "~"
             (concat (file-name-directory buffer-file-name) "%b") )
          (buffer-name)
          )))